Iterator Pattern.
	객체를 저장하는 방식과 데이터 구조를 보여주지 않으면서도 클라이언트로 하여금 객체들에게 일일이 접근할 수 있게 해줄 수 있다.
	
	**반복 작업을 캡슐화한다
	
	1. Iterator 인터페이스 -> hasNext(), next(), remove()를 구현
		또는, java.util.Iterator을 이용한다
	
	정리.
		1. 캡슐화를 통해 데이터 구조를 숨길 수 있다
		2. 코드 중복을 제거할 수 있다
		3. Client는 인터페이스인 Iterator만 알고 있으면, 반복 작업을 수행할 수 있다
		
	정의.
		이터레이터 패턴은 구현 방법을 노출시키지 않으면서도, 그 집합체 안에 들어있는 모든 항목에 대해
		접근할 수 있게 해주는 방법을 제공한다.
		
	디자인 원칙.
		클래스를 바꾸는 이유는 한 가지 뿐이어야 한다!